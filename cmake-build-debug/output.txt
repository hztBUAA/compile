CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 1
COMMA ,
IDENFR c
ASSIGN =
IDENFR a
SEMICN ;
CONSTTK const
INTTK int
IDENFR aa
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 1
COMMA ,
IDENFR f
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR dd
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR d2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g
SEMICN ;
INTTK int
IDENFR h
COMMA ,
IDENFR i
SEMICN ;
INTTK int
IDENFR gg
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR hh
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR ii
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR g2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR h2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR i2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR gcd
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR gcd
LPARENT (
IDENFR b
MOD %
IDENFR a
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fu2
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
MULT *
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR gcd
LPARENT (
INTCON 1
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
MINU -
IDENFR x
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21371026\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "??\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d??\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
LBRACE {
SEMICN ;
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR e
ASSIGN =
IDENFR c
PLUS +
IDENFR d
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR fu2
LPARENT (
INTCON 1
RPARENT )
DIV /
INTCON 2
PLUS +
IDENFR aa
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
LPARENT (
IDENFR aa
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR c
MOD %
INTCON 2
RPARENT )
COMMA ,
IDENFR d
ASSIGN =
INTCON 3
PLUS +
INTCON 3
SEMICN ;
RBRACE }
LBRACE {
IDENFR d
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 123321
SEMICN ;
IDENFR d
ASSIGN =
MINU -
PLUS +
MINU -
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR d
ASSIGN =
LPARENT (
IDENFR d
PLUS +
IDENFR d
MULT *
IDENFR d
RPARENT )
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR fu2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR f3
LPARENT (
INTCON 1
COMMA ,
IDENFR dd
RPARENT )
MULT *
IDENFR fu2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR f4
LPARENT (
INTCON 1
COMMA ,
IDENFR d2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR d2
RPARENT )
PLUS +
IDENFR fu2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR c
MULT *
IDENFR c
PLUS +
IDENFR c
DIV /
INTCON 1
SEMICN ;
IDENFR d
ASSIGN =
IDENFR c
DIV /
INTCON 1
MINU -
IDENFR c
MOD %
INTCON 1
SEMICN ;
IDENFR d
ASSIGN =
LPARENT (
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MOD %
INTCON 1
RPARENT )
MULT *
INTCON 3
SEMICN ;
IDENFR d
ASSIGN =
IDENFR c
MULT *
IDENFR c
PLUS +
INTCON 1
MULT *
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
IDENFR c
OR ||
IDENFR c
NEQ !=
IDENFR c
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
NEQ !=
IDENFR c
AND &&
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
EQL ==
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 3
EQL ==
INTCON 2
MULT *
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
INTCON 6666
MINU -
INTCON 555
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
NEQ !=
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
LBRACE {
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
AND &&
IDENFR d
GRE >
IDENFR c
OR ||
IDENFR c
GRE >
INTCON 0
AND &&
IDENFR d
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR gcd
LPARENT (
INTCON 1
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR aa
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 1
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR d
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
OR ||
NOT !
INTCON 2
AND &&
LPARENT (
INTCON 3
PLUS +
INTCON 8
RPARENT )
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GEQ >=
INTCON 1
AND &&
IDENFR b
LEQ <=
INTCON 1
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 1
OR ||
IDENFR b
LSS <
IDENFR a
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR c
RPARENT )
LBRACE {
LPARENT (
INTCON 392
MINU -
INTCON 44
RPARENT )
MULT *
INTCON 12
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
LSS <
INTCON 1
RPARENT )
LBRACE {
INTCON 1234
PLUS +
LPARENT (
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
INTCON 2
RPARENT )
DIV /
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR a
RPARENT )
LBRACE {
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR a
RPARENT )
LBRACE {
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
INTCON 333
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
LBRACE {
INTTK int
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 1
COMMA ,
IDENFR f
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR dd
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR ee
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR ff
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR d2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR e2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
COMMA ,
IDENFR c2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
IDENFR d
ASSIGN =
LPARENT (
INTCON 3
PLUS +
INTCON 5
MULT *
INTCON 8
RPARENT )
DIV /
INTCON 2
PLUS +
INTCON 1
MULT *
INTCON 1
SEMICN ;
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR aa
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 1
COMMA ,
IDENFR dd
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
LPARENT (
IDENFR a2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MULT *
IDENFR aa
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
COMMA ,
IDENFR d2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
